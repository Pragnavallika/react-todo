{"version":3,"sources":["Todoform.jsx","Todo.jsx","TodoList.jsx","App.js","reportWebVitals.js","index.js"],"names":["Todoform","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f6e69b0a.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\r\n\r\nfunction Todoform(props) {\r\n\r\n\r\n\r\nconst [input, setInput] = useState(props.edit ? props.edit.value:'');\r\n\r\nconst inputRef = useRef(null)\r\n\r\nuseEffect(() => {\r\n    inputRef.current.focus()\r\n})\r\n\r\nconst handleChange = e => {\r\n    setInput(e.target.value);\r\n}\r\n\r\nconst handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    props.onSubmit({\r\n       id: Math.floor(Math.random() * 10000), \r\n       text : input \r\n    });\r\n\r\n    setInput('');\r\n    \r\n    \r\n};\r\n\r\n    return (\r\n       <div className=\"todo-form\">\r\n            <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n\r\n                {props.edit ? \r\n                \r\n                \r\n\r\n                (\r\n                    <>\r\n                <input type=\"text\" placeholder=\"update your item\" value={input} name='text' className=\"todo-input edit\" onChange={handleChange}\r\n                ref={inputRef}\r\n                />\r\n\r\n                <button className='todo-button edit'>Update</button>\r\n                </>\r\n                )  : \r\n\r\n                \r\n                \r\n                \r\n\r\n\r\n                (\r\n                    <>  \r\n                    <input type=\"text\" placeholder=\"add a todo\" value={input} name='text' className=\"todo-input\" onChange={handleChange}\r\n                ref={inputRef}\r\n                />\r\n\r\n                <button className='todo-button'>Add</button>\r\n                </>\r\n                )\r\n                \r\n                \r\n                }\r\n\r\n\r\n                \r\n\r\n            </form>\r\n            </div>     \r\n        \r\n    );\r\n}\r\n\r\nexport default Todoform;\r\n","import React, {useState} from 'react';\r\nimport Todoform from \"./Todoform\";\r\nimport {RiCloseCircleLine } from \"react-icons/ri\";\r\nimport {TiEdit } from \"react-icons/ti\";\r\n\r\n\r\nfunction Todo({ todos, completeTodo, removeTodo, updateTodo }) {\r\n\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: ''\r\n  });\r\n\r\n  const submitUpdate = value => {\r\n    updateTodo(edit.id, value)\r\n    setEdit({\r\n      id: null,\r\n      value:''\r\n    });\r\n  }\r\n\r\n  if (edit.id){\r\n    return <Todoform edit={edit} onSubmit={submitUpdate} >\r\n\r\n    </Todoform>\r\n  }\r\n\r\n\r\n  return todos.map((todo, index) => (\r\n    <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n     key={index}\r\n     >\r\n\r\n      <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n      \r\n      \r\n        {todo.text}\r\n      </div>\r\n\r\n      <div className='icons'>\r\n        <RiCloseCircleLine \r\n\r\n        onClick={() => removeTodo(todo.id)}\r\n\r\n        className='delete-icon' />\r\n        <TiEdit \r\n        \r\n        onClick={() => setEdit({id: todo.id, value: todo.text})}\r\n\r\n        className='Edit-icon' />\r\n\r\n        \r\n\r\n\r\n      </div>\r\n\r\n    </div>\r\n  ));\r\n}\r\n\r\nexport default Todo;\r\n","import React, {useState} from 'react';\r\nimport Todoform from './Todoform';\r\nimport Todo from './Todo';\r\n\r\n\r\nfunction TodoList() {\r\n    const [todos, setTodos] = useState([]);\r\n\r\n    const addTodo = todo => {\r\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n            return;\r\n        }\r\n\r\n        const newTodos = [todo, ...todos];\r\n        setTodos(newTodos);\r\n        \r\n    };\r\n\r\n    const updateTodo = (todoId, newValue) => {\r\n\r\n        if (!newValue.text || /^\\s*$/.test(newValue .text)) {\r\n            return;\r\n        }\r\n\r\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)))\r\n\r\n\r\n    }\r\n\r\n    const removeTodo = id => {\r\n        const removeArr = [...todos].filter(todo => todo.id !== id );\r\n\r\n        setTodos(removeArr);\r\n    }\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Let's Plan for the Day </h1>\r\n            <Todoform onSubmit={addTodo} />\r\n            <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} updateTodo={updateTodo} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\n\n\nimport TodoList from \"./TodoList\";\n\nimport './App.css';\n\n\nconst App = () => {\n\n  return (\n    <>\n\n    <TodoList/>\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n  <>\n  <BrowserRouter>\n    <App/>\n  </BrowserRouter>\n  \n  </>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}